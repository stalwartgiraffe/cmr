// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package gitlab

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson46735d53DecodeGithubComStalwartgiraffeCmrInternalGitlab(in *jlexer.Lexer, out *EventModelSlice) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(EventModelSlice, 0, 0)
			} else {
				*out = EventModelSlice{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 EventModel
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson46735d53EncodeGithubComStalwartgiraffeCmrInternalGitlab(out *jwriter.Writer, in EventModelSlice) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v EventModelSlice) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson46735d53EncodeGithubComStalwartgiraffeCmrInternalGitlab(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventModelSlice) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson46735d53EncodeGithubComStalwartgiraffeCmrInternalGitlab(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventModelSlice) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson46735d53DecodeGithubComStalwartgiraffeCmrInternalGitlab(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventModelSlice) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson46735d53DecodeGithubComStalwartgiraffeCmrInternalGitlab(l, v)
}
func easyjson46735d53DecodeGithubComStalwartgiraffeCmrInternalGitlab1(in *jlexer.Lexer, out *EventModel) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "project_id":
			out.ProjectID = int(in.Int())
		case "target_id":
			out.TargetID = int(in.Int())
		case "target_iid":
			out.TargetIid = int(in.Int())
		case "author_id":
			out.AuthorID = int(in.Int())
		case "author_username":
			out.AuthorUsername = string(in.String())
		case "title":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Title).UnmarshalJSON(data))
			}
		case "action_name":
			out.ActionName = string(in.String())
		case "target_type":
			out.TargetType = string(in.String())
		case "target_title":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.TargetTitle).UnmarshalJSON(data))
			}
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "data":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Data).UnmarshalJSON(data))
			}
		case "author":
			if in.IsNull() {
				in.Skip()
				out.Author = nil
			} else {
				if out.Author == nil {
					out.Author = new(AuthorModel)
				}
				easyjson46735d53DecodeGithubComStalwartgiraffeCmrInternalGitlab2(in, out.Author)
			}
		case "note":
			if in.IsNull() {
				in.Skip()
				out.Note = nil
			} else {
				if out.Note == nil {
					out.Note = new(Note)
				}
				easyjson46735d53DecodeGithubComStalwartgiraffeCmrInternalGitlab3(in, out.Note)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson46735d53EncodeGithubComStalwartgiraffeCmrInternalGitlab1(out *jwriter.Writer, in EventModel) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"project_id\":"
		out.RawString(prefix)
		out.Int(int(in.ProjectID))
	}
	{
		const prefix string = ",\"target_id\":"
		out.RawString(prefix)
		out.Int(int(in.TargetID))
	}
	{
		const prefix string = ",\"target_iid\":"
		out.RawString(prefix)
		out.Int(int(in.TargetIid))
	}
	{
		const prefix string = ",\"author_id\":"
		out.RawString(prefix)
		out.Int(int(in.AuthorID))
	}
	{
		const prefix string = ",\"author_username\":"
		out.RawString(prefix)
		out.String(string(in.AuthorUsername))
	}
	if true {
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.Raw((in.Title).MarshalJSON())
	}
	{
		const prefix string = ",\"action_name\":"
		out.RawString(prefix)
		out.String(string(in.ActionName))
	}
	{
		const prefix string = ",\"target_type\":"
		out.RawString(prefix)
		out.String(string(in.TargetType))
	}
	if true {
		const prefix string = ",\"target_title\":"
		out.RawString(prefix)
		out.Raw((in.TargetTitle).MarshalJSON())
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	if true {
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		out.Raw((in.Data).MarshalJSON())
	}
	if in.Author != nil {
		const prefix string = ",\"author\":"
		out.RawString(prefix)
		easyjson46735d53EncodeGithubComStalwartgiraffeCmrInternalGitlab2(out, *in.Author)
	}
	if in.Note != nil {
		const prefix string = ",\"note\":"
		out.RawString(prefix)
		easyjson46735d53EncodeGithubComStalwartgiraffeCmrInternalGitlab3(out, *in.Note)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventModel) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson46735d53EncodeGithubComStalwartgiraffeCmrInternalGitlab1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventModel) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson46735d53EncodeGithubComStalwartgiraffeCmrInternalGitlab1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventModel) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson46735d53DecodeGithubComStalwartgiraffeCmrInternalGitlab1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventModel) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson46735d53DecodeGithubComStalwartgiraffeCmrInternalGitlab1(l, v)
}
func easyjson46735d53DecodeGithubComStalwartgiraffeCmrInternalGitlab3(in *jlexer.Lexer, out *Note) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "noteable_id":
			out.NoteableID = int(in.Int())
		case "noteable_iid":
			out.NoteableIid = int(in.Int())
		case "noteable_type":
			out.NoteableType = string(in.String())
		case "body":
			out.Body = string(in.String())
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updated_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "system":
			out.System = bool(in.Bool())
		case "attachment":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Attachment).UnmarshalJSON(data))
			}
		case "project_id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ProjectID).UnmarshalJSON(data))
			}
		case "resolvable":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Resolvable).UnmarshalJSON(data))
			}
		case "confidential":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Confidential).UnmarshalJSON(data))
			}
		case "internal":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Internal).UnmarshalJSON(data))
			}
		case "author":
			if in.IsNull() {
				in.Skip()
				out.Author = nil
			} else {
				if out.Author == nil {
					out.Author = new(AuthorModel)
				}
				easyjson46735d53DecodeGithubComStalwartgiraffeCmrInternalGitlab2(in, out.Author)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson46735d53EncodeGithubComStalwartgiraffeCmrInternalGitlab3(out *jwriter.Writer, in Note) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"noteable_id\":"
		out.RawString(prefix)
		out.Int(int(in.NoteableID))
	}
	{
		const prefix string = ",\"noteable_iid\":"
		out.RawString(prefix)
		out.Int(int(in.NoteableIid))
	}
	{
		const prefix string = ",\"noteable_type\":"
		out.RawString(prefix)
		out.String(string(in.NoteableType))
	}
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix)
		out.String(string(in.Body))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	if true {
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"system\":"
		out.RawString(prefix)
		out.Bool(bool(in.System))
	}
	if true {
		const prefix string = ",\"attachment\":"
		out.RawString(prefix)
		out.Raw((in.Attachment).MarshalJSON())
	}
	if true {
		const prefix string = ",\"project_id\":"
		out.RawString(prefix)
		out.Raw((in.ProjectID).MarshalJSON())
	}
	if true {
		const prefix string = ",\"resolvable\":"
		out.RawString(prefix)
		out.Raw((in.Resolvable).MarshalJSON())
	}
	if true {
		const prefix string = ",\"confidential\":"
		out.RawString(prefix)
		out.Raw((in.Confidential).MarshalJSON())
	}
	if true {
		const prefix string = ",\"internal\":"
		out.RawString(prefix)
		out.Raw((in.Internal).MarshalJSON())
	}
	if in.Author != nil {
		const prefix string = ",\"author\":"
		out.RawString(prefix)
		easyjson46735d53EncodeGithubComStalwartgiraffeCmrInternalGitlab2(out, *in.Author)
	}
	out.RawByte('}')
}
func easyjson46735d53DecodeGithubComStalwartgiraffeCmrInternalGitlab2(in *jlexer.Lexer, out *AuthorModel) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "name":
			out.Name = string(in.String())
		case "username":
			out.Username = string(in.String())
		case "state":
			out.State = string(in.String())
		case "email":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Email).UnmarshalJSON(data))
			}
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "avatar_url":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.AvatarURL).UnmarshalJSON(data))
			}
		case "web_url":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.WebURL).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson46735d53EncodeGithubComStalwartgiraffeCmrInternalGitlab2(out *jwriter.Writer, in AuthorModel) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"state\":"
		out.RawString(prefix)
		out.String(string(in.State))
	}
	if true {
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.Raw((in.Email).MarshalJSON())
	}
	if true {
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	if true {
		const prefix string = ",\"avatar_url\":"
		out.RawString(prefix)
		out.Raw((in.AvatarURL).MarshalJSON())
	}
	if true {
		const prefix string = ",\"web_url\":"
		out.RawString(prefix)
		out.Raw((in.WebURL).MarshalJSON())
	}
	out.RawByte('}')
}
