// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package gitlab

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson5af0c543DecodeGithubComStalwartgiraffeCmrInternalGitlab(in *jlexer.Lexer, out *TimeStatsModel) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "time_estimate":
			out.TimeEstimate = int(in.Int())
		case "total_time_spent":
			out.TotalTimeSpent = int(in.Int())
		case "human_time_estimate":
			(out.HumanTimeEstimate).UnmarshalEasyJSON(in)
		case "human_total_time_spent":
			(out.HumanTotalTimeSpent).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5af0c543EncodeGithubComStalwartgiraffeCmrInternalGitlab(out *jwriter.Writer, in TimeStatsModel) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"time_estimate\":"
		out.RawString(prefix[1:])
		out.Int(int(in.TimeEstimate))
	}
	{
		const prefix string = ",\"total_time_spent\":"
		out.RawString(prefix)
		out.Int(int(in.TotalTimeSpent))
	}
	if (in.HumanTimeEstimate).IsDefined() {
		const prefix string = ",\"human_time_estimate\":"
		out.RawString(prefix)
		(in.HumanTimeEstimate).MarshalEasyJSON(out)
	}
	if (in.HumanTotalTimeSpent).IsDefined() {
		const prefix string = ",\"human_total_time_spent\":"
		out.RawString(prefix)
		(in.HumanTotalTimeSpent).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TimeStatsModel) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5af0c543EncodeGithubComStalwartgiraffeCmrInternalGitlab(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TimeStatsModel) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5af0c543EncodeGithubComStalwartgiraffeCmrInternalGitlab(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TimeStatsModel) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5af0c543DecodeGithubComStalwartgiraffeCmrInternalGitlab(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TimeStatsModel) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5af0c543DecodeGithubComStalwartgiraffeCmrInternalGitlab(l, v)
}
func easyjson5af0c543DecodeGithubComStalwartgiraffeCmrInternalGitlab1(in *jlexer.Lexer, out *TaskCompletionStatusModel) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "count":
			out.Count = int(in.Int())
		case "completed_count":
			out.CompletedCount = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5af0c543EncodeGithubComStalwartgiraffeCmrInternalGitlab1(out *jwriter.Writer, in TaskCompletionStatusModel) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Count))
	}
	{
		const prefix string = ",\"completed_count\":"
		out.RawString(prefix)
		out.Int(int(in.CompletedCount))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TaskCompletionStatusModel) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5af0c543EncodeGithubComStalwartgiraffeCmrInternalGitlab1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TaskCompletionStatusModel) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5af0c543EncodeGithubComStalwartgiraffeCmrInternalGitlab1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TaskCompletionStatusModel) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5af0c543DecodeGithubComStalwartgiraffeCmrInternalGitlab1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TaskCompletionStatusModel) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5af0c543DecodeGithubComStalwartgiraffeCmrInternalGitlab1(l, v)
}
func easyjson5af0c543DecodeGithubComStalwartgiraffeCmrInternalGitlab2(in *jlexer.Lexer, out *ReferencesModel) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "short":
			out.Short = string(in.String())
		case "relative":
			out.Relative = string(in.String())
		case "full":
			out.Full = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5af0c543EncodeGithubComStalwartgiraffeCmrInternalGitlab2(out *jwriter.Writer, in ReferencesModel) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"short\":"
		out.RawString(prefix[1:])
		out.String(string(in.Short))
	}
	{
		const prefix string = ",\"relative\":"
		out.RawString(prefix)
		out.String(string(in.Relative))
	}
	{
		const prefix string = ",\"full\":"
		out.RawString(prefix)
		out.String(string(in.Full))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReferencesModel) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5af0c543EncodeGithubComStalwartgiraffeCmrInternalGitlab2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReferencesModel) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5af0c543EncodeGithubComStalwartgiraffeCmrInternalGitlab2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReferencesModel) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5af0c543DecodeGithubComStalwartgiraffeCmrInternalGitlab2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReferencesModel) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5af0c543DecodeGithubComStalwartgiraffeCmrInternalGitlab2(l, v)
}
func easyjson5af0c543DecodeGithubComStalwartgiraffeCmrInternalGitlab3(in *jlexer.Lexer, out *MilestoneModel) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "iid":
			out.Iid = int(in.Int())
		case "project_id":
			out.ProjectID = int(in.Int())
		case "title":
			out.Title = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "state":
			out.State = string(in.String())
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updated_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "due_date":
			out.DueDate = string(in.String())
		case "start_date":
			out.StartDate = string(in.String())
		case "web_url":
			out.WebURL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5af0c543EncodeGithubComStalwartgiraffeCmrInternalGitlab3(out *jwriter.Writer, in MilestoneModel) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"iid\":"
		out.RawString(prefix)
		out.Int(int(in.Iid))
	}
	{
		const prefix string = ",\"project_id\":"
		out.RawString(prefix)
		out.Int(int(in.ProjectID))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"state\":"
		out.RawString(prefix)
		out.String(string(in.State))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"due_date\":"
		out.RawString(prefix)
		out.String(string(in.DueDate))
	}
	{
		const prefix string = ",\"start_date\":"
		out.RawString(prefix)
		out.String(string(in.StartDate))
	}
	{
		const prefix string = ",\"web_url\":"
		out.RawString(prefix)
		out.String(string(in.WebURL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MilestoneModel) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5af0c543EncodeGithubComStalwartgiraffeCmrInternalGitlab3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MilestoneModel) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5af0c543EncodeGithubComStalwartgiraffeCmrInternalGitlab3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MilestoneModel) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5af0c543DecodeGithubComStalwartgiraffeCmrInternalGitlab3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MilestoneModel) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5af0c543DecodeGithubComStalwartgiraffeCmrInternalGitlab3(l, v)
}
func easyjson5af0c543DecodeGithubComStalwartgiraffeCmrInternalGitlab4(in *jlexer.Lexer, out *MergeRequestModelSlice) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(MergeRequestModelSlice, 0, 0)
			} else {
				*out = MergeRequestModelSlice{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 MergeRequestModel
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5af0c543EncodeGithubComStalwartgiraffeCmrInternalGitlab4(out *jwriter.Writer, in MergeRequestModelSlice) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v MergeRequestModelSlice) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5af0c543EncodeGithubComStalwartgiraffeCmrInternalGitlab4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MergeRequestModelSlice) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5af0c543EncodeGithubComStalwartgiraffeCmrInternalGitlab4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MergeRequestModelSlice) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5af0c543DecodeGithubComStalwartgiraffeCmrInternalGitlab4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MergeRequestModelSlice) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5af0c543DecodeGithubComStalwartgiraffeCmrInternalGitlab4(l, v)
}
func easyjson5af0c543DecodeGithubComStalwartgiraffeCmrInternalGitlab5(in *jlexer.Lexer, out *MergeRequestModel) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "iid":
			out.Iid = int(in.Int())
		case "project_id":
			out.ProjectID = int(in.Int())
		case "title":
			out.Title = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "state":
			out.State = string(in.String())
		case "imported":
			out.Imported = bool(in.Bool())
		case "imported_from":
			out.ImportedFrom = string(in.String())
		case "merged_by":
			if in.IsNull() {
				in.Skip()
				out.MergedBy = nil
			} else {
				if out.MergedBy == nil {
					out.MergedBy = new(AuthorModel)
				}
				easyjson5af0c543DecodeGithubComStalwartgiraffeCmrInternalGitlab6(in, out.MergedBy)
			}
		case "merge_user":
			if in.IsNull() {
				in.Skip()
				out.MergeUser = nil
			} else {
				if out.MergeUser == nil {
					out.MergeUser = new(AuthorModel)
				}
				easyjson5af0c543DecodeGithubComStalwartgiraffeCmrInternalGitlab6(in, out.MergeUser)
			}
		case "merged_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.MergedAt).UnmarshalJSON(data))
			}
		case "prepared_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.PreparedAt).UnmarshalJSON(data))
			}
		case "closed_by":
			(out.ClosedBy).UnmarshalEasyJSON(in)
		case "closed_at":
			(out.ClosedAt).UnmarshalEasyJSON(in)
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updated_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "target_branch":
			out.TargetBranch = string(in.String())
		case "source_branch":
			out.SourceBranch = string(in.String())
		case "upvotes":
			out.Upvotes = int(in.Int())
		case "downvotes":
			out.Downvotes = int(in.Int())
		case "author":
			if in.IsNull() {
				in.Skip()
				out.Author = nil
			} else {
				if out.Author == nil {
					out.Author = new(AuthorModel)
				}
				easyjson5af0c543DecodeGithubComStalwartgiraffeCmrInternalGitlab6(in, out.Author)
			}
		case "assignee":
			if in.IsNull() {
				in.Skip()
				out.Assignee = nil
			} else {
				if out.Assignee == nil {
					out.Assignee = new(AuthorModel)
				}
				easyjson5af0c543DecodeGithubComStalwartgiraffeCmrInternalGitlab6(in, out.Assignee)
			}
		case "assignees":
			if in.IsNull() {
				in.Skip()
				out.Assignees = nil
			} else {
				in.Delim('[')
				if out.Assignees == nil {
					if !in.IsDelim(']') {
						out.Assignees = make([]AuthorModel, 0, 0)
					} else {
						out.Assignees = []AuthorModel{}
					}
				} else {
					out.Assignees = (out.Assignees)[:0]
				}
				for !in.IsDelim(']') {
					var v4 AuthorModel
					easyjson5af0c543DecodeGithubComStalwartgiraffeCmrInternalGitlab6(in, &v4)
					out.Assignees = append(out.Assignees, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "reviewers":
			if in.IsNull() {
				in.Skip()
				out.Reviewers = nil
			} else {
				in.Delim('[')
				if out.Reviewers == nil {
					if !in.IsDelim(']') {
						out.Reviewers = make([]AuthorModel, 0, 0)
					} else {
						out.Reviewers = []AuthorModel{}
					}
				} else {
					out.Reviewers = (out.Reviewers)[:0]
				}
				for !in.IsDelim(']') {
					var v5 AuthorModel
					easyjson5af0c543DecodeGithubComStalwartgiraffeCmrInternalGitlab6(in, &v5)
					out.Reviewers = append(out.Reviewers, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "source_project_id":
			out.SourceProjectID = int(in.Int())
		case "target_project_id":
			out.TargetProjectID = int(in.Int())
		case "labels":
			if in.IsNull() {
				in.Skip()
				out.Labels = nil
			} else {
				in.Delim('[')
				if out.Labels == nil {
					if !in.IsDelim(']') {
						out.Labels = make([]string, 0, 4)
					} else {
						out.Labels = []string{}
					}
				} else {
					out.Labels = (out.Labels)[:0]
				}
				for !in.IsDelim(']') {
					var v6 string
					v6 = string(in.String())
					out.Labels = append(out.Labels, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "draft":
			out.Draft = bool(in.Bool())
		case "work_in_progress":
			out.WorkInProgress = bool(in.Bool())
		case "milestone":
			if in.IsNull() {
				in.Skip()
				out.Milestone = nil
			} else {
				if out.Milestone == nil {
					out.Milestone = new(MilestoneModel)
				}
				(*out.Milestone).UnmarshalEasyJSON(in)
			}
		case "merge_when_pipeline_succeeds":
			out.MergeWhenPipelineSucceeds = bool(in.Bool())
		case "merge_status":
			out.MergeStatus = string(in.String())
		case "detailed_merge_status":
			out.DetailedMergeStatus = string(in.String())
		case "sha":
			out.Sha = string(in.String())
		case "merge_commit_sha":
			(out.MergeCommitSha).UnmarshalEasyJSON(in)
		case "squash_commit_sha":
			(out.SquashCommitSha).UnmarshalEasyJSON(in)
		case "user_notes_count":
			out.UserNotesCount = int(in.Int())
		case "discussion_locked":
			(out.DiscussionLocked).UnmarshalEasyJSON(in)
		case "should_remove_source_branch":
			(out.ShouldRemoveSourceBranch).UnmarshalEasyJSON(in)
		case "force_remove_source_branch":
			out.ForceRemoveSourceBranch = bool(in.Bool())
		case "allow_collaboration":
			out.AllowCollaboration = bool(in.Bool())
		case "allow_maintainer_to_push":
			out.AllowMaintainerToPush = bool(in.Bool())
		case "web_url":
			out.WebURL = string(in.String())
		case "references":
			if in.IsNull() {
				in.Skip()
				out.References = nil
			} else {
				if out.References == nil {
					out.References = new(ReferencesModel)
				}
				(*out.References).UnmarshalEasyJSON(in)
			}
		case "time_stats":
			if in.IsNull() {
				in.Skip()
				out.TimeStats = nil
			} else {
				if out.TimeStats == nil {
					out.TimeStats = new(TimeStatsModel)
				}
				(*out.TimeStats).UnmarshalEasyJSON(in)
			}
		case "squash":
			out.Squash = bool(in.Bool())
		case "squash_on_merge":
			out.SquashOnMerge = bool(in.Bool())
		case "task_completion_status":
			if in.IsNull() {
				in.Skip()
				out.TaskCompletionStatus = nil
			} else {
				if out.TaskCompletionStatus == nil {
					out.TaskCompletionStatus = new(TaskCompletionStatusModel)
				}
				(*out.TaskCompletionStatus).UnmarshalEasyJSON(in)
			}
		case "has_conflicts":
			out.HasConflicts = bool(in.Bool())
		case "blocking_discussions_resolved":
			out.BlockingDiscussionsResolved = bool(in.Bool())
		case "approvals_before_merge":
			(out.ApprovalsBeforeMerge).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5af0c543EncodeGithubComStalwartgiraffeCmrInternalGitlab5(out *jwriter.Writer, in MergeRequestModel) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"iid\":"
		out.RawString(prefix)
		out.Int(int(in.Iid))
	}
	{
		const prefix string = ",\"project_id\":"
		out.RawString(prefix)
		out.Int(int(in.ProjectID))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"state\":"
		out.RawString(prefix)
		out.String(string(in.State))
	}
	{
		const prefix string = ",\"imported\":"
		out.RawString(prefix)
		out.Bool(bool(in.Imported))
	}
	{
		const prefix string = ",\"imported_from\":"
		out.RawString(prefix)
		out.String(string(in.ImportedFrom))
	}
	if in.MergedBy != nil {
		const prefix string = ",\"merged_by\":"
		out.RawString(prefix)
		easyjson5af0c543EncodeGithubComStalwartgiraffeCmrInternalGitlab6(out, *in.MergedBy)
	}
	if in.MergeUser != nil {
		const prefix string = ",\"merge_user\":"
		out.RawString(prefix)
		easyjson5af0c543EncodeGithubComStalwartgiraffeCmrInternalGitlab6(out, *in.MergeUser)
	}
	{
		const prefix string = ",\"merged_at\":"
		out.RawString(prefix)
		out.Raw((in.MergedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"prepared_at\":"
		out.RawString(prefix)
		out.Raw((in.PreparedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"closed_by\":"
		out.RawString(prefix)
		(in.ClosedBy).MarshalEasyJSON(out)
	}
	if (in.ClosedAt).IsDefined() {
		const prefix string = ",\"closed_at\":"
		out.RawString(prefix)
		(in.ClosedAt).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"target_branch\":"
		out.RawString(prefix)
		out.String(string(in.TargetBranch))
	}
	{
		const prefix string = ",\"source_branch\":"
		out.RawString(prefix)
		out.String(string(in.SourceBranch))
	}
	{
		const prefix string = ",\"upvotes\":"
		out.RawString(prefix)
		out.Int(int(in.Upvotes))
	}
	{
		const prefix string = ",\"downvotes\":"
		out.RawString(prefix)
		out.Int(int(in.Downvotes))
	}
	if in.Author != nil {
		const prefix string = ",\"author\":"
		out.RawString(prefix)
		easyjson5af0c543EncodeGithubComStalwartgiraffeCmrInternalGitlab6(out, *in.Author)
	}
	if in.Assignee != nil {
		const prefix string = ",\"assignee\":"
		out.RawString(prefix)
		easyjson5af0c543EncodeGithubComStalwartgiraffeCmrInternalGitlab6(out, *in.Assignee)
	}
	{
		const prefix string = ",\"assignees\":"
		out.RawString(prefix)
		if in.Assignees == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v7, v8 := range in.Assignees {
				if v7 > 0 {
					out.RawByte(',')
				}
				easyjson5af0c543EncodeGithubComStalwartgiraffeCmrInternalGitlab6(out, v8)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"reviewers\":"
		out.RawString(prefix)
		if in.Reviewers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v9, v10 := range in.Reviewers {
				if v9 > 0 {
					out.RawByte(',')
				}
				easyjson5af0c543EncodeGithubComStalwartgiraffeCmrInternalGitlab6(out, v10)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"source_project_id\":"
		out.RawString(prefix)
		out.Int(int(in.SourceProjectID))
	}
	{
		const prefix string = ",\"target_project_id\":"
		out.RawString(prefix)
		out.Int(int(in.TargetProjectID))
	}
	{
		const prefix string = ",\"labels\":"
		out.RawString(prefix)
		if in.Labels == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Labels {
				if v11 > 0 {
					out.RawByte(',')
				}
				out.String(string(v12))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"draft\":"
		out.RawString(prefix)
		out.Bool(bool(in.Draft))
	}
	{
		const prefix string = ",\"work_in_progress\":"
		out.RawString(prefix)
		out.Bool(bool(in.WorkInProgress))
	}
	if in.Milestone != nil {
		const prefix string = ",\"milestone\":"
		out.RawString(prefix)
		(*in.Milestone).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"merge_when_pipeline_succeeds\":"
		out.RawString(prefix)
		out.Bool(bool(in.MergeWhenPipelineSucceeds))
	}
	{
		const prefix string = ",\"merge_status\":"
		out.RawString(prefix)
		out.String(string(in.MergeStatus))
	}
	{
		const prefix string = ",\"detailed_merge_status\":"
		out.RawString(prefix)
		out.String(string(in.DetailedMergeStatus))
	}
	{
		const prefix string = ",\"sha\":"
		out.RawString(prefix)
		out.String(string(in.Sha))
	}
	if (in.MergeCommitSha).IsDefined() {
		const prefix string = ",\"merge_commit_sha\":"
		out.RawString(prefix)
		(in.MergeCommitSha).MarshalEasyJSON(out)
	}
	if (in.SquashCommitSha).IsDefined() {
		const prefix string = ",\"squash_commit_sha\":"
		out.RawString(prefix)
		(in.SquashCommitSha).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"user_notes_count\":"
		out.RawString(prefix)
		out.Int(int(in.UserNotesCount))
	}
	if (in.DiscussionLocked).IsDefined() {
		const prefix string = ",\"discussion_locked\":"
		out.RawString(prefix)
		(in.DiscussionLocked).MarshalEasyJSON(out)
	}
	if (in.ShouldRemoveSourceBranch).IsDefined() {
		const prefix string = ",\"should_remove_source_branch\":"
		out.RawString(prefix)
		(in.ShouldRemoveSourceBranch).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"force_remove_source_branch\":"
		out.RawString(prefix)
		out.Bool(bool(in.ForceRemoveSourceBranch))
	}
	{
		const prefix string = ",\"allow_collaboration\":"
		out.RawString(prefix)
		out.Bool(bool(in.AllowCollaboration))
	}
	{
		const prefix string = ",\"allow_maintainer_to_push\":"
		out.RawString(prefix)
		out.Bool(bool(in.AllowMaintainerToPush))
	}
	{
		const prefix string = ",\"web_url\":"
		out.RawString(prefix)
		out.String(string(in.WebURL))
	}
	if in.References != nil {
		const prefix string = ",\"references\":"
		out.RawString(prefix)
		(*in.References).MarshalEasyJSON(out)
	}
	if in.TimeStats != nil {
		const prefix string = ",\"time_stats\":"
		out.RawString(prefix)
		(*in.TimeStats).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"squash\":"
		out.RawString(prefix)
		out.Bool(bool(in.Squash))
	}
	{
		const prefix string = ",\"squash_on_merge\":"
		out.RawString(prefix)
		out.Bool(bool(in.SquashOnMerge))
	}
	{
		const prefix string = ",\"task_completion_status\":"
		out.RawString(prefix)
		if in.TaskCompletionStatus == nil {
			out.RawString("null")
		} else {
			(*in.TaskCompletionStatus).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"has_conflicts\":"
		out.RawString(prefix)
		out.Bool(bool(in.HasConflicts))
	}
	{
		const prefix string = ",\"blocking_discussions_resolved\":"
		out.RawString(prefix)
		out.Bool(bool(in.BlockingDiscussionsResolved))
	}
	if (in.ApprovalsBeforeMerge).IsDefined() {
		const prefix string = ",\"approvals_before_merge\":"
		out.RawString(prefix)
		(in.ApprovalsBeforeMerge).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MergeRequestModel) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5af0c543EncodeGithubComStalwartgiraffeCmrInternalGitlab5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MergeRequestModel) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5af0c543EncodeGithubComStalwartgiraffeCmrInternalGitlab5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MergeRequestModel) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5af0c543DecodeGithubComStalwartgiraffeCmrInternalGitlab5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MergeRequestModel) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5af0c543DecodeGithubComStalwartgiraffeCmrInternalGitlab5(l, v)
}
func easyjson5af0c543DecodeGithubComStalwartgiraffeCmrInternalGitlab6(in *jlexer.Lexer, out *AuthorModel) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "name":
			out.Name = string(in.String())
		case "username":
			out.Username = string(in.String())
		case "state":
			out.State = string(in.String())
		case "email":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Email).UnmarshalJSON(data))
			}
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "avatar_url":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.AvatarURL).UnmarshalJSON(data))
			}
		case "web_url":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.WebURL).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5af0c543EncodeGithubComStalwartgiraffeCmrInternalGitlab6(out *jwriter.Writer, in AuthorModel) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"state\":"
		out.RawString(prefix)
		out.String(string(in.State))
	}
	if true {
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.Raw((in.Email).MarshalJSON())
	}
	if true {
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	if true {
		const prefix string = ",\"avatar_url\":"
		out.RawString(prefix)
		out.Raw((in.AvatarURL).MarshalJSON())
	}
	if true {
		const prefix string = ",\"web_url\":"
		out.RawString(prefix)
		out.Raw((in.WebURL).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjson5af0c543DecodeGithubComStalwartgiraffeCmrInternalGitlab7(in *jlexer.Lexer, out *BadMergeRequestModelSlice) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(BadMergeRequestModelSlice, 0, 0)
			} else {
				*out = BadMergeRequestModelSlice{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v13 BadMergeRequestModel
			(v13).UnmarshalEasyJSON(in)
			*out = append(*out, v13)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5af0c543EncodeGithubComStalwartgiraffeCmrInternalGitlab7(out *jwriter.Writer, in BadMergeRequestModelSlice) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v14, v15 := range in {
			if v14 > 0 {
				out.RawByte(',')
			}
			(v15).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v BadMergeRequestModelSlice) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5af0c543EncodeGithubComStalwartgiraffeCmrInternalGitlab7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BadMergeRequestModelSlice) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5af0c543EncodeGithubComStalwartgiraffeCmrInternalGitlab7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BadMergeRequestModelSlice) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5af0c543DecodeGithubComStalwartgiraffeCmrInternalGitlab7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BadMergeRequestModelSlice) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5af0c543DecodeGithubComStalwartgiraffeCmrInternalGitlab7(l, v)
}
func easyjson5af0c543DecodeGithubComStalwartgiraffeCmrInternalGitlab8(in *jlexer.Lexer, out *BadMergeRequestModel) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "iid":
			out.Iid = int(in.Int())
		case "project_id":
			out.ProjectID = int(in.Int())
		case "title":
			out.Title = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "state":
			out.State = string(in.String())
		case "created_at":
			out.CreatedAt = string(in.String())
		case "updated_at":
			out.UpdatedAt = string(in.String())
		case "merged_by":
			if m, ok := out.MergedBy.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.MergedBy.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.MergedBy = in.Interface()
			}
		case "merge_user":
			if m, ok := out.MergeUser.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.MergeUser.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.MergeUser = in.Interface()
			}
		case "merged_at":
			if m, ok := out.MergedAt.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.MergedAt.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.MergedAt = in.Interface()
			}
		case "closed_by":
			if m, ok := out.ClosedBy.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ClosedBy.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ClosedBy = in.Interface()
			}
		case "closed_at":
			if m, ok := out.ClosedAt.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ClosedAt.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ClosedAt = in.Interface()
			}
		case "target_branch":
			out.TargetBranch = string(in.String())
		case "source_branch":
			out.SourceBranch = string(in.String())
		case "user_notes_count":
			out.UserNotesCount = int(in.Int())
		case "upvotes":
			out.Upvotes = int(in.Int())
		case "downvotes":
			out.Downvotes = int(in.Int())
		case "author":
			easyjson5af0c543Decode(in, &out.Author)
		case "assignees":
			if in.IsNull() {
				in.Skip()
				out.Assignees = nil
			} else {
				in.Delim('[')
				if out.Assignees == nil {
					if !in.IsDelim(']') {
						out.Assignees = make([]struct {
							ID        int    `json:"id"`
							Username  string `json:"username"`
							Name      string `json:"name"`
							State     string `json:"state"`
							AvatarURL string `json:"avatar_url"`
							WebURL    string `json:"web_url"`
						}, 0, 0)
					} else {
						out.Assignees = []struct {
							ID        int    `json:"id"`
							Username  string `json:"username"`
							Name      string `json:"name"`
							State     string `json:"state"`
							AvatarURL string `json:"avatar_url"`
							WebURL    string `json:"web_url"`
						}{}
					}
				} else {
					out.Assignees = (out.Assignees)[:0]
				}
				for !in.IsDelim(']') {
					var v16 struct {
						ID        int    `json:"id"`
						Username  string `json:"username"`
						Name      string `json:"name"`
						State     string `json:"state"`
						AvatarURL string `json:"avatar_url"`
						WebURL    string `json:"web_url"`
					}
					easyjson5af0c543Decode(in, &v16)
					out.Assignees = append(out.Assignees, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "assignee":
			easyjson5af0c543Decode(in, &out.Assignee)
		case "reviewers":
			if in.IsNull() {
				in.Skip()
				out.Reviewers = nil
			} else {
				in.Delim('[')
				if out.Reviewers == nil {
					if !in.IsDelim(']') {
						out.Reviewers = make([]interface{}, 0, 4)
					} else {
						out.Reviewers = []interface{}{}
					}
				} else {
					out.Reviewers = (out.Reviewers)[:0]
				}
				for !in.IsDelim(']') {
					var v17 interface{}
					if m, ok := v17.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v17.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v17 = in.Interface()
					}
					out.Reviewers = append(out.Reviewers, v17)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "source_project_id":
			out.SourceProjectID = int(in.Int())
		case "target_project_id":
			out.TargetProjectID = int(in.Int())
		case "labels":
			if in.IsNull() {
				in.Skip()
				out.Labels = nil
			} else {
				in.Delim('[')
				if out.Labels == nil {
					if !in.IsDelim(']') {
						out.Labels = make([]string, 0, 4)
					} else {
						out.Labels = []string{}
					}
				} else {
					out.Labels = (out.Labels)[:0]
				}
				for !in.IsDelim(']') {
					var v18 string
					v18 = string(in.String())
					out.Labels = append(out.Labels, v18)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "draft":
			out.Draft = bool(in.Bool())
		case "work_in_progress":
			out.WorkInProgress = bool(in.Bool())
		case "milestone":
			if m, ok := out.Milestone.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Milestone.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Milestone = in.Interface()
			}
		case "merge_when_pipeline_succeeds":
			out.MergeWhenPipelineSucceeds = bool(in.Bool())
		case "merge_status":
			out.MergeStatus = string(in.String())
		case "detailed_merge_status":
			out.DetailedMergeStatus = string(in.String())
		case "sha":
			out.Sha = string(in.String())
		case "merge_commit_sha":
			if m, ok := out.MergeCommitSha.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.MergeCommitSha.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.MergeCommitSha = in.Interface()
			}
		case "squash_commit_sha":
			if m, ok := out.SquashCommitSha.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.SquashCommitSha.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.SquashCommitSha = in.Interface()
			}
		case "discussion_locked":
			if m, ok := out.DiscussionLocked.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.DiscussionLocked.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.DiscussionLocked = in.Interface()
			}
		case "should_remove_source_branch":
			if m, ok := out.ShouldRemoveSourceBranch.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ShouldRemoveSourceBranch.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ShouldRemoveSourceBranch = in.Interface()
			}
		case "force_remove_source_branch":
			out.ForceRemoveSourceBranch = bool(in.Bool())
		case "reference":
			out.Reference = string(in.String())
		case "references":
			easyjson5af0c543Decode1(in, &out.References)
		case "web_url":
			out.WebURL = string(in.String())
		case "time_stats":
			easyjson5af0c543Decode2(in, &out.TimeStats)
		case "squash":
			out.Squash = bool(in.Bool())
		case "squash_on_merge":
			out.SquashOnMerge = bool(in.Bool())
		case "task_completion_status":
			easyjson5af0c543Decode3(in, &out.TaskCompletionStatus)
		case "has_conflicts":
			out.HasConflicts = bool(in.Bool())
		case "blocking_discussions_resolved":
			out.BlockingDiscussionsResolved = bool(in.Bool())
		case "approvals_before_merge":
			if m, ok := out.ApprovalsBeforeMerge.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ApprovalsBeforeMerge.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ApprovalsBeforeMerge = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5af0c543EncodeGithubComStalwartgiraffeCmrInternalGitlab8(out *jwriter.Writer, in BadMergeRequestModel) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"iid\":"
		out.RawString(prefix)
		out.Int(int(in.Iid))
	}
	{
		const prefix string = ",\"project_id\":"
		out.RawString(prefix)
		out.Int(int(in.ProjectID))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"state\":"
		out.RawString(prefix)
		out.String(string(in.State))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.String(string(in.CreatedAt))
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.String(string(in.UpdatedAt))
	}
	{
		const prefix string = ",\"merged_by\":"
		out.RawString(prefix)
		if m, ok := in.MergedBy.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.MergedBy.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.MergedBy))
		}
	}
	{
		const prefix string = ",\"merge_user\":"
		out.RawString(prefix)
		if m, ok := in.MergeUser.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.MergeUser.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.MergeUser))
		}
	}
	{
		const prefix string = ",\"merged_at\":"
		out.RawString(prefix)
		if m, ok := in.MergedAt.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.MergedAt.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.MergedAt))
		}
	}
	{
		const prefix string = ",\"closed_by\":"
		out.RawString(prefix)
		if m, ok := in.ClosedBy.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.ClosedBy.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.ClosedBy))
		}
	}
	{
		const prefix string = ",\"closed_at\":"
		out.RawString(prefix)
		if m, ok := in.ClosedAt.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.ClosedAt.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.ClosedAt))
		}
	}
	{
		const prefix string = ",\"target_branch\":"
		out.RawString(prefix)
		out.String(string(in.TargetBranch))
	}
	{
		const prefix string = ",\"source_branch\":"
		out.RawString(prefix)
		out.String(string(in.SourceBranch))
	}
	{
		const prefix string = ",\"user_notes_count\":"
		out.RawString(prefix)
		out.Int(int(in.UserNotesCount))
	}
	{
		const prefix string = ",\"upvotes\":"
		out.RawString(prefix)
		out.Int(int(in.Upvotes))
	}
	{
		const prefix string = ",\"downvotes\":"
		out.RawString(prefix)
		out.Int(int(in.Downvotes))
	}
	{
		const prefix string = ",\"author\":"
		out.RawString(prefix)
		easyjson5af0c543Encode(out, in.Author)
	}
	{
		const prefix string = ",\"assignees\":"
		out.RawString(prefix)
		if in.Assignees == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v19, v20 := range in.Assignees {
				if v19 > 0 {
					out.RawByte(',')
				}
				easyjson5af0c543Encode(out, v20)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"assignee\":"
		out.RawString(prefix)
		easyjson5af0c543Encode(out, in.Assignee)
	}
	{
		const prefix string = ",\"reviewers\":"
		out.RawString(prefix)
		if in.Reviewers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v21, v22 := range in.Reviewers {
				if v21 > 0 {
					out.RawByte(',')
				}
				if m, ok := v22.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v22.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v22))
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"source_project_id\":"
		out.RawString(prefix)
		out.Int(int(in.SourceProjectID))
	}
	{
		const prefix string = ",\"target_project_id\":"
		out.RawString(prefix)
		out.Int(int(in.TargetProjectID))
	}
	{
		const prefix string = ",\"labels\":"
		out.RawString(prefix)
		if in.Labels == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.Labels {
				if v23 > 0 {
					out.RawByte(',')
				}
				out.String(string(v24))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"draft\":"
		out.RawString(prefix)
		out.Bool(bool(in.Draft))
	}
	{
		const prefix string = ",\"work_in_progress\":"
		out.RawString(prefix)
		out.Bool(bool(in.WorkInProgress))
	}
	{
		const prefix string = ",\"milestone\":"
		out.RawString(prefix)
		if m, ok := in.Milestone.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Milestone.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Milestone))
		}
	}
	{
		const prefix string = ",\"merge_when_pipeline_succeeds\":"
		out.RawString(prefix)
		out.Bool(bool(in.MergeWhenPipelineSucceeds))
	}
	{
		const prefix string = ",\"merge_status\":"
		out.RawString(prefix)
		out.String(string(in.MergeStatus))
	}
	{
		const prefix string = ",\"detailed_merge_status\":"
		out.RawString(prefix)
		out.String(string(in.DetailedMergeStatus))
	}
	{
		const prefix string = ",\"sha\":"
		out.RawString(prefix)
		out.String(string(in.Sha))
	}
	{
		const prefix string = ",\"merge_commit_sha\":"
		out.RawString(prefix)
		if m, ok := in.MergeCommitSha.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.MergeCommitSha.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.MergeCommitSha))
		}
	}
	{
		const prefix string = ",\"squash_commit_sha\":"
		out.RawString(prefix)
		if m, ok := in.SquashCommitSha.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.SquashCommitSha.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.SquashCommitSha))
		}
	}
	{
		const prefix string = ",\"discussion_locked\":"
		out.RawString(prefix)
		if m, ok := in.DiscussionLocked.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.DiscussionLocked.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.DiscussionLocked))
		}
	}
	{
		const prefix string = ",\"should_remove_source_branch\":"
		out.RawString(prefix)
		if m, ok := in.ShouldRemoveSourceBranch.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.ShouldRemoveSourceBranch.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.ShouldRemoveSourceBranch))
		}
	}
	{
		const prefix string = ",\"force_remove_source_branch\":"
		out.RawString(prefix)
		out.Bool(bool(in.ForceRemoveSourceBranch))
	}
	{
		const prefix string = ",\"reference\":"
		out.RawString(prefix)
		out.String(string(in.Reference))
	}
	{
		const prefix string = ",\"references\":"
		out.RawString(prefix)
		easyjson5af0c543Encode1(out, in.References)
	}
	{
		const prefix string = ",\"web_url\":"
		out.RawString(prefix)
		out.String(string(in.WebURL))
	}
	{
		const prefix string = ",\"time_stats\":"
		out.RawString(prefix)
		easyjson5af0c543Encode2(out, in.TimeStats)
	}
	{
		const prefix string = ",\"squash\":"
		out.RawString(prefix)
		out.Bool(bool(in.Squash))
	}
	{
		const prefix string = ",\"squash_on_merge\":"
		out.RawString(prefix)
		out.Bool(bool(in.SquashOnMerge))
	}
	{
		const prefix string = ",\"task_completion_status\":"
		out.RawString(prefix)
		easyjson5af0c543Encode3(out, in.TaskCompletionStatus)
	}
	{
		const prefix string = ",\"has_conflicts\":"
		out.RawString(prefix)
		out.Bool(bool(in.HasConflicts))
	}
	{
		const prefix string = ",\"blocking_discussions_resolved\":"
		out.RawString(prefix)
		out.Bool(bool(in.BlockingDiscussionsResolved))
	}
	{
		const prefix string = ",\"approvals_before_merge\":"
		out.RawString(prefix)
		if m, ok := in.ApprovalsBeforeMerge.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.ApprovalsBeforeMerge.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.ApprovalsBeforeMerge))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BadMergeRequestModel) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5af0c543EncodeGithubComStalwartgiraffeCmrInternalGitlab8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BadMergeRequestModel) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5af0c543EncodeGithubComStalwartgiraffeCmrInternalGitlab8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BadMergeRequestModel) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5af0c543DecodeGithubComStalwartgiraffeCmrInternalGitlab8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BadMergeRequestModel) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5af0c543DecodeGithubComStalwartgiraffeCmrInternalGitlab8(l, v)
}
func easyjson5af0c543Decode3(in *jlexer.Lexer, out *struct {
	Count          int `json:"count"`
	CompletedCount int `json:"completed_count"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "count":
			out.Count = int(in.Int())
		case "completed_count":
			out.CompletedCount = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5af0c543Encode3(out *jwriter.Writer, in struct {
	Count          int `json:"count"`
	CompletedCount int `json:"completed_count"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Count))
	}
	{
		const prefix string = ",\"completed_count\":"
		out.RawString(prefix)
		out.Int(int(in.CompletedCount))
	}
	out.RawByte('}')
}
func easyjson5af0c543Decode2(in *jlexer.Lexer, out *struct {
	TimeEstimate        int         `json:"time_estimate"`
	TotalTimeSpent      int         `json:"total_time_spent"`
	HumanTimeEstimate   interface{} `json:"human_time_estimate"`
	HumanTotalTimeSpent interface{} `json:"human_total_time_spent"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "time_estimate":
			out.TimeEstimate = int(in.Int())
		case "total_time_spent":
			out.TotalTimeSpent = int(in.Int())
		case "human_time_estimate":
			if m, ok := out.HumanTimeEstimate.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.HumanTimeEstimate.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.HumanTimeEstimate = in.Interface()
			}
		case "human_total_time_spent":
			if m, ok := out.HumanTotalTimeSpent.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.HumanTotalTimeSpent.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.HumanTotalTimeSpent = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5af0c543Encode2(out *jwriter.Writer, in struct {
	TimeEstimate        int         `json:"time_estimate"`
	TotalTimeSpent      int         `json:"total_time_spent"`
	HumanTimeEstimate   interface{} `json:"human_time_estimate"`
	HumanTotalTimeSpent interface{} `json:"human_total_time_spent"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"time_estimate\":"
		out.RawString(prefix[1:])
		out.Int(int(in.TimeEstimate))
	}
	{
		const prefix string = ",\"total_time_spent\":"
		out.RawString(prefix)
		out.Int(int(in.TotalTimeSpent))
	}
	{
		const prefix string = ",\"human_time_estimate\":"
		out.RawString(prefix)
		if m, ok := in.HumanTimeEstimate.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.HumanTimeEstimate.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.HumanTimeEstimate))
		}
	}
	{
		const prefix string = ",\"human_total_time_spent\":"
		out.RawString(prefix)
		if m, ok := in.HumanTotalTimeSpent.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.HumanTotalTimeSpent.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.HumanTotalTimeSpent))
		}
	}
	out.RawByte('}')
}
func easyjson5af0c543Decode1(in *jlexer.Lexer, out *struct {
	Short    string `json:"short"`
	Relative string `json:"relative"`
	Full     string `json:"full"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "short":
			out.Short = string(in.String())
		case "relative":
			out.Relative = string(in.String())
		case "full":
			out.Full = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5af0c543Encode1(out *jwriter.Writer, in struct {
	Short    string `json:"short"`
	Relative string `json:"relative"`
	Full     string `json:"full"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"short\":"
		out.RawString(prefix[1:])
		out.String(string(in.Short))
	}
	{
		const prefix string = ",\"relative\":"
		out.RawString(prefix)
		out.String(string(in.Relative))
	}
	{
		const prefix string = ",\"full\":"
		out.RawString(prefix)
		out.String(string(in.Full))
	}
	out.RawByte('}')
}
func easyjson5af0c543Decode(in *jlexer.Lexer, out *struct {
	ID        int    `json:"id"`
	Username  string `json:"username"`
	Name      string `json:"name"`
	State     string `json:"state"`
	AvatarURL string `json:"avatar_url"`
	WebURL    string `json:"web_url"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "username":
			out.Username = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "state":
			out.State = string(in.String())
		case "avatar_url":
			out.AvatarURL = string(in.String())
		case "web_url":
			out.WebURL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5af0c543Encode(out *jwriter.Writer, in struct {
	ID        int    `json:"id"`
	Username  string `json:"username"`
	Name      string `json:"name"`
	State     string `json:"state"`
	AvatarURL string `json:"avatar_url"`
	WebURL    string `json:"web_url"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"state\":"
		out.RawString(prefix)
		out.String(string(in.State))
	}
	{
		const prefix string = ",\"avatar_url\":"
		out.RawString(prefix)
		out.String(string(in.AvatarURL))
	}
	{
		const prefix string = ",\"web_url\":"
		out.RawString(prefix)
		out.String(string(in.WebURL))
	}
	out.RawByte('}')
}
